################################# Developing Polygenic Score from Kalra data in SBayesR ###################################
################################### https://cnsgenomics.com/software/gctb/#Tutorial #######################################

A) Creating .ma file for input into SBayesR - done in RStudio 

install.packages("tidyverse")
library(tidyverse)

kalra_harmonized_hg19 <- read.delim("/home/projects/cio/PRS_collab/kalra/kalra_liftdown_to_hg19.txt") %>% 
  select(variant_id,effect_allele,non_effect_allele,frequency,effect_size,standard_error,pvalue,sample_size) %>%
  dplyr::rename(SNP=variant_id, A1=effect_allele,A2=non_effect_allele,freq=frequency,b=effect_size,se=standard_error,p=pvalue,N=sample_size) %>% 
  write.table("/home/projects/cio/PRS_collab/kalra/sbayesr/kalra_hg19.ma", append = FALSE, sep ="\t", quote=FALSE,
              row.names = FALSE, col.names = TRUE)
              
B) SBayesR - done in Linux
#Will work better if command done all in one line

#/bin/bash
/opt/gctb_2.03beta_Linux/gctb --sbayes R 
  --robust 
  --mldm /home/projects/reference_data/sbayesr/ukb_50k_bigset_2.8M/mldm_uk2.8M.txt 
  --pi 0.95,0.02,0.02,0.01 
  --gamma 0.0,0.01,0.1,1 
  --gwas-summary /home/projects/cio/PRS_collab/kalra/sbayesr/kalra_hg19.ma 
  --chain-length 10000  
  --burn-in 2000 
  --out-freq 10  
  --out /home/projects/cio/PRS_collab/kalra/sbayesr/test
  
  
C) Annotation of SBayesR output - done in RStudio
#Annotation performed in Variant Effect Predictor(VEP)#
#Need gene names as future filtering steps are gene-based#

install.packages("tidyverse, splitstackshape")
library(tidyverse)
library(splitstackshape)

#SBayesR output
kalra_sbayesr_hg19<- read.csv("/home/projects/cio/PRS_collab/kalra/sbayesr/test.snpRes", sep="") #2,753,914 SNPs

#VEP output based on SBayesR output
Kalra_vep_annotation_combined.txt <- read.table("/home/projects/cio/annotation/Kalra_vep_annotation_combined.txt", quote="\"") #n=3,325,287

Kalra_vep_annotation<-Kalra_vep_annotation_combined.txt%>%
  dplyr::rename(ensembl_gene_id=V4, Name=V1, gene=V14) %>%
   dplyr::select(ensembl_gene_id, Name, gene)

#Formatting VEP output to get a gene column
annotation_edits<-cSplit(data.frame(Kalra_vep_annotation),"gene",";") %>%
  dplyr::select(ensembl_gene_id, Name, gene_03,gene_04)%>%
  dplyr::rename(no_distance=gene_03, normal_gene=gene_04)%>%
  mutate_at("no_distance", str_replace, "SYMBOL=","") %>%
  mutate_at("normal_gene", str_replace, "SYMBOL=","") %>% 
  mutate_at("normal_gene", str_replace, "SYMBOL_SOURCE=HGNC","")%>%
  mutate_at("normal_gene", str_replace, "SYMBOL_SOURCE=Clone_based_vega_gene","")%>% 
  mutate_at("normal_gene", str_replace, "SYMBOL_SOURCE=Clone_based_ensembl_gene","") %>% 
  mutate_at("no_distance", str_replace,"STRAND=1","")%>%
  mutate_at("no_distance",str_replace,"STRAND=-1","")

#Moving gene names into blank spaces 
annotation_final<-annotation_edits %>% 
  unite('gene',c('no_distance','normal_gene'), sep="") %>%
    dplyr::select(Name,gene) 

#See if the number of unique rsIDs are the same in the VEP file and the SBayesR file
unique(kalra_sbayesr_hg19$Name) #2,753,914
unique(annotation_final$Name) #2,790,191

#Find the number of SNPs in SBayesR that were not annotated by VEP
anti_join<-anti_join(kalra_sbayesr_hg19,annotation_final, by="Name") #12,556 SNPs

#Create file to run through ENSEMBl to get gene names for these variants (specify hg19)
write.table(anti_join$Name, file="/home/projects/cio/annotation/anti_join_results_hg19.txt", append = FALSE, sep ="\t", quote=FALSE, 
            row.names = FALSE, col.names = FALSE) 

#Output from Ensembl
anti_join_from_ensembl <- read.delim("/home/projects/cio/annotation/anti_join_results_ensembl_hg19.txt", header=FALSE, comment.char="#") %>%
  dplyr::select(V1,V6)%>%
   dplyr::rename(Name=V1,gene=V6)

#Put the new annotated genes back into the VEP file 
annotation_filled<-rbind(annotation_final,anti_join_from_ensembl) 

#Add back into the SBayesR file 
kalra_genes_prs<-left_join(kalra_sbayesr_hg19,annotation_filled, by= "Name") #left join as we only want the SNPs in the SBayesR file to be included
unique(kalra_genes_prs$Name) #2,753,914 ==equals the output number of the original SBayesR file (but there are duplicates)

#Take out any duplicated SNPs (precautionary step)
n_occur <- data.frame(table(kalra_genes_prs$Name)) #counts the duplicated SNPs
distinct_react_kalra<-kalra_genes_prs %>% distinct(Name, .keep_all = TRUE) #2,753,914 SNPs

#Merging back to the Kalra harmonization file (see Part A in this file) to get p values needed for ReACt script
kalra_harmonized_hg19<-kalra_harmonized_hg19%>%dplyr::rename(Name=variant_id)
merged_react_kalra<-merge(distinct_react_kalra,kalra_harmonized_hg19, by="Name")
